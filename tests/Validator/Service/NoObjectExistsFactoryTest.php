<?php

declare(strict_types=1);

namespace DoctrineModuleTest\Validator\Service;

use Doctrine\Persistence\ObjectManager;
use Doctrine\Persistence\ObjectRepository;
use DoctrineModule\Validator\NoObjectExists;
use DoctrineModule\Validator\Service\Exception\ServiceCreationException;
use DoctrineModule\Validator\Service\NoObjectExistsFactory;
use DoctrineModuleTest\Validator\TestAsset\DummyClass;
use Laminas\ServiceManager\ServiceLocatorInterface;
use PHPUnit\Framework\TestCase;
use Psr\Container\ContainerInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-09-04 at 11:12:27.
 *
 * @coversDefaultClass NoObjectExistsFactory
 * @group validator
 */
class NoObjectExistsFactoryTest extends TestCase
{
    private NoObjectExistsFactory $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new NoObjectExistsFactory();
    }

    /** @coversNothing */
    public function testCallable(): void
    {
        $this->assertIsCallable($this->object);
    }

    /**
     * @covers ::__invoke
     * @covers ::container
     * @covers ::getRepository
     * @covers ::getObjectManager
     * @covers ::getFields
     */
    public function testInvoke(): void
    {
        $options = [
            'target_class' => DummyClass::class,
            'fields'       => ['test'],
        ];

        $repository    = $this->createMock(ObjectRepository::class);
        $objectManager = $this->createMock(ObjectManager::class);
        $objectManager
            ->expects(self::atLeastOnce())
            ->method('getRepository')
            ->with(DummyClass::class)
            ->willReturn($repository);

        $container = $this->createMock(ContainerInterface::class);
        $container
            ->expects(self::atLeastOnce())
            ->method('get')
            ->with('doctrine.entitymanager.orm_default')
            ->willReturn($objectManager);

        $instance = $this->object->__invoke(
            $container,
            NoObjectExists::class,
            $options,
        );
        $this->assertInstanceOf(NoObjectExists::class, $instance);
    }

    /**
     * @covers ::__invoke
     * @covers ::container
     * @covers ::getRepository
     * @covers ::getObjectManager
     * @covers ::getFields
     */
    public function testInvokeWithObjectManagerGiven(): void
    {
        $repository    = $this->createMock(ObjectRepository::class);
        $objectManager = $this->createMock(ObjectManager::class);
        $objectManager
            ->expects(self::atLeastOnce())
            ->method('getRepository')
            ->with(DummyClass::class)
            ->willReturn($repository);

        $options = [
            'target_class'   => DummyClass::class,
            'object_manager' => $objectManager,
            'fields'         => ['test'],
        ];

        $container = $this->createMock(ContainerInterface::class);
        $container
            ->expects(self::never())
            ->method('get')
            ->with('doctrine.entitymanager.orm_default');

        $instance = $this->object->__invoke(
            $container,
            NoObjectExists::class,
            $options,
        );
        $this->assertInstanceOf(NoObjectExists::class, $instance);
    }

    /** @covers ::merge */
    public function testInvokeWithMerge(): void
    {
        $options = [
            'target_class' => DummyClass::class,
            'fields'       => ['test'],
            'messages'     => [NoObjectExists::ERROR_OBJECT_FOUND => 'test'],
        ];

        $repository    = $this->createMock(ObjectRepository::class);
        $objectManager = $this->createMock(ObjectManager::class);
        $objectManager
            ->expects(self::atLeastOnce())
            ->method('getRepository')
            ->with(DummyClass::class)
            ->willReturn($repository);

        $container = $this->createMock(ContainerInterface::class);
        $container
            ->expects(self::atLeastOnce())
            ->method('get')
            ->with('doctrine.entitymanager.orm_default')
            ->willReturn($objectManager);

        $instance  = $this->object->__invoke(
            $container,
            NoObjectExists::class,
            $options,
        );
        $templates = $instance->getMessageTemplates();
        $this->assertArrayHasKey(NoObjectExists::ERROR_OBJECT_FOUND, $templates);
        $this->assertSame('test', $templates[NoObjectExists::ERROR_OBJECT_FOUND]);
    }

    /** @covers ::getRepository */
    public function testInvokeWithoutTargetClass(): void
    {
        $this->expectException(ServiceCreationException::class);

        $container = $this->createMock(ContainerInterface::class);
        $this->object->__invoke(
            $container,
            NoObjectExists::class,
            [],
        );
    }

    public function testInvokeWithOptions(): void
    {
        $options = [
            'target_class' => DummyClass::class,
            'fields'       => ['test'],
        ];

        $repository    = $this->createMock(ObjectRepository::class);
        $objectManager = $this->createMock(ObjectManager::class);
        $objectManager
            ->expects(self::atLeastOnce())
            ->method('getRepository')
            ->with(DummyClass::class)
            ->willReturn($repository);

        $container = $this->createMock(ServiceLocatorInterface::class);
        $container
            ->expects(self::atLeastOnce())
            ->method('get')
            ->with('doctrine.entitymanager.orm_default')
            ->willReturn($objectManager);

        $instance = $this->object->__invoke(
            $container,
            NoObjectExists::class,
            $options,
        );
        $this->assertInstanceOf(NoObjectExists::class, $instance);
    }
}
