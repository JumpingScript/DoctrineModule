<?php

declare(strict_types=1);

namespace DoctrineModuleTest\Validator\Service;

use Doctrine\Persistence\ObjectManager;
use Doctrine\Persistence\ObjectRepository;
use DoctrineModule\Validator\Service\UniqueObjectFactory;
use DoctrineModule\Validator\UniqueObject;
use DoctrineModuleTest\Validator\TestAsset\DummyClass;
use PHPUnit\Framework\TestCase;
use Psr\Container\ContainerInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-09-04 at 11:57:37.
 *
 * @coversDefaultClass UniqueObjectFactory
 * @group validator
 */
class UniqueObjectFactoryTest extends TestCase
{
    private UniqueObjectFactory $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new UniqueObjectFactory();
    }

    /** @covers ::__invoke */
    public function testInvoke(): void
    {
        $options = [
            'target_class' => DummyClass::class,
            'fields'       => ['test'],
        ];

        $repository    = $this->createMock(ObjectRepository::class);
        $objectManager = $this->createMock(ObjectManager::class);
        $objectManager->expects(self::atLeastOnce())
            ->method('getRepository')
            ->with(DummyClass::class)
            ->willReturn($repository);

        $container = $this->createMock(ContainerInterface::class);
        $container->expects(self::atLeastOnce())
            ->method('get')
            ->with('doctrine.entitymanager.orm_default')
            ->willReturn($objectManager);

        $instance = $this->object->__invoke(
            $container,
            UniqueObject::class,
            $options,
        );
        $this->assertInstanceOf(UniqueObject::class, $instance);
    }
}
